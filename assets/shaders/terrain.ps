varying mat3 outTBN;
varying vec3 outWorld;

uniform float Roughness;
uniform float Metallic;

uniform vec3 SunPosition;
uniform vec3 MoonPosition;
uniform float TimeOfDay;

uniform vec2 MapSize;

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform sampler2D tex3;

vec4 tri_planar(sampler2D tex, vec3 worldNormal, float tiling)
{
    vec3 blending = abs(worldNormal);
    blending = normalize(max(blending, 0.00001));
    float b = (blending.x + blending.y + blending.z);
    blending /= b;

    vec4 xaxis = texture2D(tex, outWorld.yz * tiling);
    vec4 yaxis = texture2D(tex, outWorld.zx * tiling);
    vec4 zaxis = texture2D(tex, outWorld.xy * tiling);
    
    return xaxis * blending.x + yaxis * blending.y + zaxis * blending.z;
}

void main()
{
    float tiling = 0.005;
    vec3 worldNormal = outTBN[2];
    
    vec3 albedo = tri_planar(tex1, worldNormal, tiling).rgb;
    vec3 normalMap = tri_planar(tex2, worldNormal, tiling).rgb * 2.0 - 1.0;
    vec4 metallicRoughness = tri_planar(tex3, worldNormal, tiling);

    float roughness = metallicRoughness.r;
    float metallic = metallicRoughness.a;

    vec3 normal = normalize(outTBN * mix(vec3(0.0, 0.0, 1.0), normalMap, 0.75));

    vec3 lightDirSun = normalize(-SunPosition);
    vec3 lightDirMoon = normalize(-MoonPosition);

    float sunFactor = min(max(0.0, -lightDirSun.y) * 10.0, 1.0);
    float moonFactor = min(max(0.0, -lightDirMoon.y) * 10.0, 1.0);

    lightDirSun *= sunFactor;
    lightDirMoon *= moonFactor;

    vec3 lightColorSun = vec3(1.0, 0.9, 0.9);
    vec3 lightColorMoon = vec3(0.7, 0.7, 0.8);

    const vec3 shadowColorSun = vec3(0.11, 0.11, 0.11);
    const vec3 shadowColorMoon = vec3(0.0, 0.11, 0.25);

    const float K = 0.8;
    float PBRSun = cook_torrance(outWorld, normal, -lightDirSun, Roughness * roughness, Metallic * metallic, K);
    float PBRMoon = cook_torrance(outWorld, normal, lightDirMoon, Roughness * roughness, Metallic * metallic, K);

    vec3 finalColorSun = mix(shadowColorSun * sunFactor, vec3(1.0), PBRSun) * lightColorSun;
    vec3 finalColorMoon = mix(shadowColorMoon * moonFactor, vec3(1.0), PBRMoon) * lightColorMoon;

    vec3 final = finalColorSun + finalColorMoon;

    gl_FragColor = vec4(albedo * final, 1.0);
}